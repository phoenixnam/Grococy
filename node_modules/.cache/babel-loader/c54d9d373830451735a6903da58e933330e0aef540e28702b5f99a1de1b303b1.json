{"ast":null,"code":"import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n  let slideSize;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0) snapGrid = [0];\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n}","map":{"version":3,"names":["setCSSProperty","updateSlides","swiper","getDirectionLabel","property","isHorizontal","getDirectionPropertyValue","node","label","parseFloat","getPropertyValue","params","$wrapperEl","size","swiperSize","rtlTranslate","rtl","wrongRTL","isVirtual","virtual","enabled","previousSlidesLength","slides","length","children","slideClass","slidesLength","snapGrid","slidesGrid","slidesSizesGrid","offsetBefore","slidesOffsetBefore","call","offsetAfter","slidesOffsetAfter","previousSnapGridLength","previousSlidesGridLength","spaceBetween","slidePosition","prevSlideSize","index","indexOf","replace","virtualSize","css","marginLeft","marginBottom","marginTop","marginRight","centeredSlides","cssMode","wrapperEl","gridEnabled","grid","rows","initSlides","slideSize","i","slide","eq","updateSlide","slidesPerView","slideStyles","getComputedStyle","currentTransform","style","transform","currentWebKitTransform","webkitTransform","roundLengths","outerWidth","outerHeight","width","paddingLeft","paddingRight","boxSizing","clientWidth","offsetWidth","Math","floor","swiperSlideSize","push","abs","slidesPerGroup","min","slidesPerGroupSkip","max","effect","setWrapperSize","updateWrapperSize","newSlidesGrid","slidesGridItem","key","filter","_","slideIndex","centeredSlidesBounds","allSlidesSize","forEach","slideSizeValue","maxSnap","map","snap","centerInsufficientSlides","allSlidesOffset","snapIndex","Object","assign","addToSnapGrid","addToSlidesGrid","v","emit","watchOverflow","checkOverflow","watchSlidesProgress","updateSlidesOffset"],"sources":["C:/Users/HP/Documents/Food/node_modules/swiper/core/update/updateSlides.js"],"sourcesContent":["import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}